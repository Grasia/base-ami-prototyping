<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>net.sf.mydevel</groupId>
        <artifactId>base-ami-prototyping</artifactId>
        <version>1.0.0-SNAPSHOT</version>
    </parent>
  <modelVersion>4.0.0</modelVersion>
  <groupId>net.sf.mydevel</groupId>
  <artifactId>alzheimer-model</artifactId>
  <packaging>jar</packaging>
  <name>Alzheimer Scenarios</name>
  <description>Models of different undesired situations of Alzheimer's Patient.</description>
  <url>http://grasia.fdi.ucm.es/sociaal</url>

  <licenses>
    <license>
      <name>The GPL V3</name>
      <url>http://www.gnu.org/copyleft/gpl.html</url>
      <distribution />
    </license>
  </licenses>
  <developers>
	<developer>
		<id>pcampillo</id>
		<name>Pablo Campillo-Sanchez</name>
		<email>pabcampi@ucm.es</email>
	</developer>
    <developer>
      <id>escalope</id>
      <name>Jorge Gomez-Sanz</name>
      <email>jjgomez@fdi.ucm.es</email>
    </developer>
  </developers>
  <dependencies>
		<dependency>
                  <groupId>net.sf.phat</groupId>
                  <artifactId>phat-generator</artifactId>
                  <version>${phat.version}</version>
                </dependency>
		<dependency>
                  <groupId>org.apache.maven.doxia</groupId>
                  <artifactId>doxia-module-markdown</artifactId>
                  <version>1.5</version>
                </dependency>

    <dependency>
      <groupId>net.sf.sociaal</groupId>
      <artifactId>sociaalmled</artifactId>
      <version>${sociaalml.version}</version>
      <scope>compile</scope>
      <exclusions>
         <exclusion>
            <groupId>net.sf.ingenme</groupId>
            <artifactId>ingened</artifactId>
         </exclusion>
      </exclusions>
    </dependency>
  </dependencies>

  <profiles>
    <profile>
      <id>release-sign-artifacts</id>
      <activation>
        <property>
          <name>performRelease</name>
          <value>true</value>
        </property>
      </activation>
      <build>
        <plugins>
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-gpg-plugin</artifactId>
            <version>1.1</version>
            <executions>
              <execution>
                <id>sign-artifacts</id>
                <phase>verify</phase>
                <goals>
                  <goal>sign</goal>
                </goals>
              </execution>
            </executions>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

	<distributionManagement>
                <site>
                        <id>website</id>
                        <url>file:target/finalsite</url>
                </site>
        </distributionManagement>

  <build>
    <plugins>
<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<version>2.4.1</version>
				<executions>
					<execution>
						<id>auto-clean</id>
						<phase>initialize</phase>
						<goals>
							<goal>clean</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
	<plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <source>1.7</source>
          <target>1.7</target>
          <optimize>true</optimize>
          <showDeprecations>true</showDeprecations>
          <encoding>ISO-8859-1</encoding>
        </configuration>
      </plugin>

	<!-- and now, the generated sources and resources are included in the
				build -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.8</version>
				<executions>
					<execution>
						<id>add-source</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>add-source</goal>
						</goals>
						<configuration>
							<sources>
								<source>${project.basedir}/target/generated</source>
							</sources>
						</configuration>
					</execution>
					<execution>
						<id>add-resource</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>add-resource</goal>
						</goals>
						<configuration>
							<resources>
								<resource>
									<directory>${project.basedir}/target/generated</directory>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

  <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-site-plugin</artifactId>
        <version>3.3</version>
        <configuration>
          <siteDirectory>${project.basedir}/target/dochtml</siteDirectory>
        </configuration>
      </plugin>
<!-- It generates the documentation associated wiht the metamodel in each submodule-->
     <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
				<executions>
				<execution>
						<!-- by default associated with generate-sources phase -->
						<id>apply ingened plugin</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<keepAlive>false</keepAlive>
							<mainClass>phat.codeproc.PHATGenerator</mainClass>
							<arguments>
								<argument>${project.basedir}/src/main/spec/specification.xml</argument>
								<argument>${project.basedir}/target/generated</argument>
							</arguments>
						</configuration>
					</execution>
					<execution>
						<id>generate document for metamodel</id>
						<phase>pre-site</phase>
						<goals>
							<goal>java</goal>
						</goals>
						<configuration>
							<keepAlive>false</keepAlive>
							<mainClass>ingenias.codeproc.HTMLDocumentGenerator</mainClass>
							<arguments>
								<argument>${project.basedir}/src/main/spec/specification.xml</argument>
								<argument>${project.basedir}</argument>
							</arguments>
						</configuration>
					</execution>
				</executions>
			</plugin>
     <plugin>
				<!-- Create the necessary resources in the target folder -->
				<artifactId>maven-resources-plugin</artifactId>
				<version>2.5</version>

				<executions>
					<execution>
						<id>copy-resources-licenses</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${project.basedir}/target/generated</outputDirectory>
							<resources>
								<resource>
									<directory>${project.basedir}/src/main/resources/licenses</directory>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>copy-resources-src</id>
						<!-- here the phase you need -->
						<phase>validate</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<outputDirectory>${basedir}/target/generated/src/main/java</outputDirectory>
							<resources>
								<resource>
									<directory>${basedir}/commonsrc</directory>
									<filtering>false</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>


				</executions>
			</plugin>
<plugin>
	<groupId>org.apache.maven.plugins</groupId>
	<artifactId>maven-dependency-plugin</artifactId>
	<version>2.0</version>
	<executions>
	  <!-- The needed resources do belong to another project -->
	  <!-- Suggestion from http://stackoverflow.com/questions/4177327/maven-copying-resources-from-client-project-to-webapp -->
	  <execution>
	    <id>build-classpath</id>
	    <phase>validate</phase>
	    <goals>
	      <goal>build-classpath</goal>
	    </goals>
	    <configuration>
	      <outputFile>target/classpath.txt</outputFile>
	      <artifactItems>
		<artifactItem>
		  <excludes>ingened</excludes>
		  </artifactItem>
		</artifactItems>
		<!-- configure the plugin here -->
		</configuration>
	      </execution>
	    </executions>
	  </plugin>
	</plugins>
	<pluginManagement>
	  <plugins>
	    <!--This plugin's configuration is used to store Eclipse m2e settings
	      only. It has no influence on the Maven build itself. -->

		<plugin>
		  <groupId>org.eclipse.m2e</groupId>
		  <artifactId>lifecycle-mapping</artifactId>
		  <version>1.0.0</version>
		  <configuration>
		    <lifecycleMappingMetadata>
		      <pluginExecutions>
			<!-- copy-dependency plugin -->
			<pluginExecution>
			  <pluginExecutionFilter>
			    <groupId>org.apache.maven.plugins</groupId>
			    <artifactId>maven-dependency-plugin</artifactId>
			    <versionRange>[1.0.0,)</versionRange>
			    <goals>
			      <goal>copy-dependencies</goal>
			      <goal>build-classpath</goal>
			    </goals>
			  </pluginExecutionFilter>
			  <action>
			  <ignore />
			  <!-- to avoid errors in the eclipse m2e plugin -->
			  </action>
			</pluginExecution>
			<pluginExecution>
			  <pluginExecutionFilter>
			    <groupId>org.codehaus.mojo</groupId>
			    <artifactId>exec-maven-plugin</artifactId>
			    <versionRange>[1.0,)</versionRange>
			    <goals>
			      <goal>java</goal>
			    </goals>
			  </pluginExecutionFilter>
			  <action>
			    <ignore />
			  </action>
			</pluginExecution>
		      </pluginExecutions>
		    </lifecycleMappingMetadata>
		  </configuration>
		</plugin>

	      </plugins>
	    </pluginManagement>
	  </build>

</project>
